{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Step Two - useFlip: holds business logic for flipping any type of card\nexport function useFlip() {\n  _s();\n  const [isFlipped, setIsFlipped] = useState(true); // Cards are facing up by default\n  const toggleFlip = () => setIsFlipped(!isFlipped);\n  return [isFlipped, toggleFlip];\n}\n_s(useFlip, \"bzTHA6C2TiM86QLq9P6r1hwCcEU=\");\n;\n\n// Step Three - useAxios: takes in a URL and returns an array with two elements. The first element is an array of data obtained from previous AJAX requests, the second element is a function that will add a new object of data to our array.\n// export const useAxios = (url) => {\n//     const [data, setData] = useState([]);\n\n//     const addDataFromURL = async () => {\n//         const response = await axios.get(url);\n//         setData(currentData => [...currentData, {...response.data, id: uuidv4() }]);\n//     };\n\n//     return [data, addDataFromURL];\n// };\n\n// Step Four - useAxios in PokeDex and PlayingCardList...\nexport const useAxios = baseUrl => {\n  _s2();\n  const [data, setData] = useState([]);\n  const addDataFromURL = async (endpoint = '') => {\n    const response = await axios.get(`${baseUrl}${endpoint}`);\n    setData(currentData => [...currentData, {\n      ...response.data,\n      id: uuidv4()\n    }]);\n  };\n  return [data, addDataFromURL];\n};\n_s2(useAxios, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");","map":{"version":3,"names":["useState","axios","v4","uuidv4","useFlip","_s","isFlipped","setIsFlipped","toggleFlip","useAxios","baseUrl","_s2","data","setData","addDataFromURL","endpoint","response","get","currentData","id"],"sources":["/home/marissa/react-cards-pokemon/src/hooks.js"],"sourcesContent":["\r\nimport { useState } from \"react\"; \r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid'; \r\n\r\n// Step Two - useFlip: holds business logic for flipping any type of card\r\nexport function useFlip() {\r\n    const [isFlipped, setIsFlipped] = useState(true); // Cards are facing up by default\r\n    const toggleFlip = () => setIsFlipped(!isFlipped);\r\n\r\n    return [isFlipped, toggleFlip];\r\n};\r\n\r\n// Step Three - useAxios: takes in a URL and returns an array with two elements. The first element is an array of data obtained from previous AJAX requests, the second element is a function that will add a new object of data to our array.\r\n// export const useAxios = (url) => {\r\n//     const [data, setData] = useState([]);\r\n    \r\n//     const addDataFromURL = async () => {\r\n//         const response = await axios.get(url);\r\n//         setData(currentData => [...currentData, {...response.data, id: uuidv4() }]);\r\n//     };\r\n\r\n//     return [data, addDataFromURL];\r\n// };\r\n\r\n\r\n// Step Four - useAxios in PokeDex and PlayingCardList...\r\nexport const useAxios = (baseUrl) => {\r\n    const [data, setData] = useState([]);\r\n    \r\n    const addDataFromURL = async (endpoint = '') => {\r\n        const response = await axios.get(`${baseUrl}${endpoint}`);\r\n        setData(currentData => [...currentData, {...response.data, id: uuidv4() }]);\r\n    };\r\n\r\n    return [data, addDataFromURL];\r\n};"],"mappings":";;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;;AAEnC;AACA,OAAO,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAMQ,UAAU,GAAGA,CAAA,KAAMD,YAAY,CAAC,CAACD,SAAS,CAAC;EAEjD,OAAO,CAACA,SAAS,EAAEE,UAAU,CAAC;AAClC;AAACH,EAAA,CALeD,OAAO;AAKtB;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA,OAAO,MAAMK,QAAQ,GAAIC,OAAO,IAAK;EAAAC,GAAA;EACjC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMc,cAAc,GAAG,MAAAA,CAAOC,QAAQ,GAAG,EAAE,KAAK;IAC5C,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAE,GAAEP,OAAQ,GAAEK,QAAS,EAAC,CAAC;IACzDF,OAAO,CAACK,WAAW,IAAI,CAAC,GAAGA,WAAW,EAAE;MAAC,GAAGF,QAAQ,CAACJ,IAAI;MAAEO,EAAE,EAAEhB,MAAM,CAAC;IAAE,CAAC,CAAC,CAAC;EAC/E,CAAC;EAED,OAAO,CAACS,IAAI,EAAEE,cAAc,CAAC;AACjC,CAAC;AAACH,GAAA,CATWF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}